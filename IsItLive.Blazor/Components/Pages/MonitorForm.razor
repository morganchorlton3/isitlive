@using System.ComponentModel.DataAnnotations

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Add New Monitor</h5>
    </div>
    <div class="card-body">
        <EditForm @key="monitor" Model="@monitor" OnValidSubmit="@HandleSubmit" OnInvalidSubmit="@HandleInvalidSubmit" FormName="MonitorForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="name" class="form-label">Name *</label>
                <InputText id="name" class="form-control" @bind-Value="monitor.Name" @bind-Value:event="oninput" placeholder="Enter monitor name" />
                <ValidationMessage For="@(() => monitor.Name)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="url" class="form-label">URL *</label>
                <InputText id="url" class="form-control" @bind-Value="monitor.Url" @bind-Value:event="oninput" placeholder="https://example.com" />
                <ValidationMessage For="@(() => monitor.Url)" class="text-danger" />
                <div class="form-text">Enter the full URL including protocol (http:// or https://)</div>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    @(isSubmitting ? "Creating..." : "Create Monitor")
                </button>
                <button type="button" class="btn btn-secondary" @onclick="ResetForm" disabled="@isSubmitting">
                    Reset
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EventCallback<CreateMonitorRequest> OnMonitorCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [SupplyParameterFromForm]
    public CreateMonitorRequest monitor { get; set; } = new();
    
    private EditContext? editContext;
    private bool isSubmitting = false;
    
    protected override void OnInitialized()
    {
        editContext = new EditContext(monitor);
    }

    public void ResetForm()
    {
        monitor = new();
        editContext = new EditContext(monitor);
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine($"Form submitted - Name: '{monitor.Name}', Url: '{monitor.Url}'");
        Console.WriteLine($"Model object: {System.Text.Json.JsonSerializer.Serialize(monitor)}");
        isSubmitting = true;
        try
        {
            await OnMonitorCreated.InvokeAsync(monitor);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine(monitor);
        Console.WriteLine("Form validation failed!");
    }
}
